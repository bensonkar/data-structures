

   #Solution 1
    String solution(String S) {
        String result = "";
        if (S.length() > 0) {
           result = S.replaceAll("plus","+").replaceAll("minus","-");
        }
        return result;
    }


   #solution 2 for Controller Class
  package com.codility.external;

  import org.reactivestreams.Publisher;
  import org.springframework.http.MediaType;
  import org.springframework.http.ResponseEntity;
  import org.springframework.web.bind.annotation.*;
  import reactor.core.publisher.Mono;
  import org.springframework.http.HttpStatus;
  import reactor.core.publisher.Flux;
  import reactor.core.publisher.Mono;

  import java.net.URI;
  @RestController
  @RequestMapping("/car")
  public class CarController {

      private final MediaType mediaType = MediaType.APPLICATION_JSON;
      private final CarService carService;

      public CarController(CarService carService) {
          this.carService = carService;
      }
      @GetMapping
      public Flux<Car> findAll() {
          return carService.findAll();

      }
      @GetMapping("/{id}")
      public Mono<Car> findById(@PathVariable("id") String id) {
        return carService.findById(id);
      }
      @PostMapping()
      public ResponseEntity<Mono<Car>> create(@RequestBody Car car) {
      Mono<Car>carCreated = carService.create(car.getName());
      return ResponseEntity.status(HttpStatus.CREATED).body(carCreated);
      }
      @DeleteMapping("/{id}")
      public ResponseEntity deleteById(@PathVariable String id) {
      Mono<Car> deletedCar =carService.delete(id);
      return ResponseEntity.ok(deletedCar);
      }
      @PutMapping("/{id}")
      public ResponseEntity updateById(@RequestBody Car car, @PathVariable String id) {
          Mono<Car> updatedCar =carService.update(id,car.getName());
          return ResponseEntity.status(HttpStatus.OK).body(updatedCar);

      }
  }


# solution 2 for service class
package com.codility.external;

import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

@Service
public class CarService {

    private final CarRepository carRepository;

    public CarService(CarRepository carRepository) {
        this.carRepository = carRepository;
    }

    public Flux<Car> findAll() {
        return carRepository.findAll();
    }

    public Mono<Car> findById(String id) {
        Mono<Car> car =carRepository.findById(id);
        if(car!=null){
            return car;
        }
        else{
         return Mono.empty();
        }

    }

    public Mono<Car> create(String name) {
        Car car = new Car();
        car.setName(name);
        return carRepository.save(car);

    }

    public Mono<Car> update(String id, String name) {
        return carRepository
            .findById(id)
            .map(res->{
                res.setName(name);
                return res;
            })

            .flatMap(result->carRepository.save(result));
    }

    public Mono<Car> delete(String id) {
        return this.carRepository
            .findById(id)
            .flatMap(p->this.carRepository.deleteById(p.getId()).
            thenReturn(p));
    }
}

 #solution 3
     @Test
        public void shouldInvert() {
            String inverted = Inverter.invert(null);

             assertEquals(Inverter.invert(""),"");
            assertEquals(Inverter.invert("a"),"a");
            assertEquals(Inverter.invert(null),"");
            assertEquals(Inverter.invert("abcd"),"dcba");

            // Assert.fail();
        }

