

   #Solution 1
    String solution(String S) {
        String result = "";
        if (S.length() > 0) {
           result = S.replaceAll("plus","+").replaceAll("minus","-");
        }
        return result;
    }


   #solution 2 for Controller Class
   package com.codility.external;

   import org.reactivestreams.Publisher;
   import org.springframework.http.MediaType;
   import org.springframework.http.ResponseEntity;
   import org.springframework.web.bind.annotation.*;
   import reactor.core.publisher.Mono;
   import org.springframework.http.HttpStatus;
   import reactor.core.publisher.Flux;

   import java.net.URI;
   import java.util.*;

   @RestController
   @RequestMapping("/car")
   public class CarController {

       private final MediaType mediaType = MediaType.APPLICATION_JSON;
       private final CarService carService;

       public CarController(CarService carService) {
           this.carService = carService;
       }

       @GetMapping()
       public Flux<Car> findAll() {
           return carService.findAll();
       }

       @GetMapping("/{id}")
       public Mono<Car> findById(@PathVariable String id) {
           return carService.findById(id);
       }

       @PostMapping()
       public ResponseEntity<Mono<Car>> create(@RequestBody Car car) {
           Mono<Car> data =  carService.create(car.getName());
           return ResponseEntity.status(HttpStatus.CREATED).body(data);
       }

       @DeleteMapping("/{id}")
       public ResponseEntity deleteById(@PathVariable String id) {
             Mono<Car> data = carService.delete(id);
           return ResponseEntity.ok(data);
       }

       @PutMapping("/{id}")
       public ResponseEntity updateById(@RequestBody Car car, @PathVariable String id) {
           return ResponseEntity.ok(car);
       }
   }


# solution 2 for service class
package com.codility.external;

import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class CarService {

    private final CarRepository carRepository;

    public CarService(CarRepository carRepository) {
        this.carRepository = carRepository;
    }

     public Flux<Car> findAll() {
        return carRepository.findAll();
    }

    public Mono<Car> findById(String id) {
        try {
            return carRepository.findById(id);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public Mono<Car> create(String name) {
        Car car = new Car();
        car.setName(name);
        return carRepository.save(car);
    }

    public Mono<Car> update(String id, String name) {
        // return carRepository
        //     .findById(null)
        //     .map(null)
        //     .flatMap(null);
        return null;
    }

    public Mono<Car> delete(String id) {

      try {
            // carRepository.deleteById(id);
                 return carRepository.findById(id);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}


 #solution 3
     @Test
        public void shouldInvert() {
            String inverted = Inverter.invert(null);

             assertEquals(Inverter.invert(""),"");
            assertEquals(Inverter.invert("a"),"a");
            assertEquals(Inverter.invert(null),"");
            assertEquals(Inverter.invert("abcd"),"dcba");

            // Assert.fail();
        }

